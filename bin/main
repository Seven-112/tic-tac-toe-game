#!/usr/bin/env ruby

# rubocop:disable Style/ConditionalAssignment
require './library/Messages'

class TicTacToe

  attr_accessor :p_1, :p_2, :p_1_symb, :p_2_symb

  def initialize; end

  # This method Set players names and symbols
  def u_entry(player_msg)
    puts player_msg.to_s
    player = gets.chomp
  end

  # Check if name or symbol is already taken
  def compare_user_entry?
    @p_1 == @p_2
  end

  # This method draw the board for the game
  def board(table)
    i = 0
    while i < table.size
      puts '+---+---+---+'
      puts "| #{table[i]} | #{table[i + 1]} | #{table[i + 2]} |"
      i += 3
    end
    puts '+---+---+---+'
  end

  # This method return a modified array, places the symbols and valid an user's move
  def move(table, choice, symb)
    table[table.index(choice)] = symb
    table
  end

  # This method check if the game is ended
  def won(table)
    i = 0
    while i < table.size
    if (p_1_symb == table[i]) && table[i] == table[i + 1] && table[i] == table[i + 2]
      puts "#{p_1} Horizontal win"
      break
    end
    i += 3
   
    # elsif table[i] == table[i + 3] && table[i] == table[i + 6]
    #   puts 'Vertical win'
    # elsif table[i] == table[i + 4] && table[i] == table[i + 8]
    #   puts 'Diagonal win'
    # elsif table[i + 2] == table[i + 4] && table[i + 2] == table[i + 6]
    #   puts table[i + 2]
    # end
    # i += 1
  end
   
  end

end


# Instaciate TicTacToe class
game = TicTacToe.new
game.p_1 = game.u_entry('Player1 enter your name: ')

# Instaciate Messages class
messages = Message.new
messages.info = game.p_1

while messages.name_length?(3, 10)
  game.p_1 = game.u_entry('Player1 name must be between 3 to 10 characters')
  messages.info = game.p_1
end

game.p_2 = game.u_entry("\nPlayer2 enter your name: ")
messages.info = game.p_2

while messages.name_length?(3, 10) || game.compare_user_entry?
  if game.compare_user_entry?
    game.p_2 = game.u_entry('Name already taken!')
    messages.info = game.p_2
  else
    game.p_2 = game.u_entry('Player2 name must be between 3 to 10 characters')
    messages.info = game.p_2
  end
end

# Choosing a symbols
puts "\nChoose a symbol 'x' or 'o' to play"
game.p_1_symb = game.u_entry("#{game.p_1}, choose a symbol: ")

until messages.valid_symbols?(game.p_1_symb)
  game.p_1_symb = game.u_entry("Invalid symbol, retry again 'x' or 'o'")
  messages.info = game.p_1
end

if game.p_1_symb == 'x'
  game.p_2_symb = 'o'
else
  game.p_2_symb = 'x'
end

# Display the Players
puts "\nLet's start, #{game.p_1}: (#{game.p_1_symb})"
puts "Let's start, #{game.p_2}: (#{game.p_2_symb})"

# init table
table = [1, 2, 3, 4, 5, 6, 7, 8, 9]

# Dispaly the board
game.board(table)

# Start playing
loop do
  p_1_choice = game.u_entry("#{game.p_1} please select a number from 1-9")
  until messages.valid_nbr_from_board?(p_1_choice.to_i, 1, 9) && table.any?(p_1_choice.to_i)
    if table.none?(p_1_choice.to_i)  && p_1_choice.to_i > 0 && p_1_choice.to_i < 10
      p_1_choice = game.u_entry("\n#{game.p_1} Number already taken, retry")
    else
      p_1_choice = game.u_entry("#{game.p_1} please select a number from 1-9")
    end
  end
  table = game.move(table, p_1_choice.to_i, game.p_1_symb.to_s)
  game.board(table)

  # Player2 choice

  p_2_choice = game.u_entry("#{game.p_2} please select a number from 1-9")
  until messages.valid_nbr_from_board?(p_2_choice.to_i, 1, 9) && table.any?(p_2_choice.to_i)
    if table.none?(p_2_choice.to_i) && p_2_choice.to_i > 0 && p_2_choice.to_i < 10
      p_2_choice = game.u_entry("\n#{game.p_2} Number already taken, retry")
    else
      p_2_choice = game.u_entry("#{game.p_2} please select a number from 1-9")
    end
  end
  table = game.move(table, p_2_choice.to_i, game.p_2_symb.to_s)
  game.board(table)

  # won : win or draw, break the loop
  game.won(table)
end

# rubocop:enable Style/ConditionalAssignment
