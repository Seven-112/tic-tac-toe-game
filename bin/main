#!/usr/bin/env ruby

# rubocop:disable Style/ConditionalAssignment, Style/BlockLength
require './library/Messages'

class TicTacToe
  attr_accessor :p_1, :p_2, :p_1_symb, :p_2_symb

  def initialize; end

  # This method Set players names and symbols
  def u_entry(player_msg)
    puts player_msg.to_s
    player = gets.chomp
    player
  end

  # Check if name or symbol is already taken
  def compare_user_entry?
    @p_1 == @p_2
  end

  # This method draw the board for the game
  def board(table)
    i = 0
    while i < table.size
      puts '+---+---+---+'
      puts "| #{table[i]} | #{table[i + 1]} | #{table[i + 2]} |"
      i += 3
    end
    puts '+---+---+---+'
  end

  # This method return a modified array,
  # places the symbols and valid an user's move
  def move(table, choice, symb)
    table[table.index(choice)] = symb
    table
  end

  # This method check if the game is draw
  def won
    false
  end

  # This method check if the game is draw
  def draw(tab)
    if tab.none?(Integer)
      puts 'The game is tie, play again'
      true
    else
      false
    end
  end
end

# Instaciate TicTacToe class
game = TicTacToe.new
game.p_1 = game.u_entry('Player1 enter your name: ')

# Instaciate Messages class
messages = Message.new
messages.info = game.p_1

while messages.name_length?(3, 10)
  game.p_1 = game.u_entry('Player1 name must be between 3 to 10 characters')
  messages.info = game.p_1
end

game.p_2 = game.u_entry("\nPlayer2 enter your name: ")
messages.info = game.p_2

while messages.name_length?(3, 10) || game.compare_user_entry?
  if game.compare_user_entry?
    messages.info = game.p_2 = game.u_entry('Name already taken!')
  else
    game.p_2 = game.u_entry('Player2 name must be between 3 to 10 characters')
  end
  messages.info = game.p_2
end

# Choosing a symbols
puts "\nChoose a symbol 'x' or 'o' to play"
game.p_1_symb = game.u_entry("#{game.p_1}, choose a symbol: ")

until messages.valid_symbols?(game.p_1_symb)
  game.p_1_symb = game.u_entry("Invalid symbol, retry again 'x' or 'o'")
  messages.info = game.p_1
end

if game.p_1_symb == 'x'
  game.p_2_symb = 'o'
else
  game.p_2_symb = 'x'
end

# Display the Players
puts "\nLet's start, #{game.p_1}: (#{game.p_1_symb})"
puts "Let's start, #{game.p_2}: (#{game.p_2_symb})"

# init table
table = [1, 2, 3, 4, 5, 6, 7, 8, 9]

# Dispaly the board
game.board(table)

# Start playing
loop do
  p_1_choice = game.u_entry("#{game.p_1} please select a number from 1-9")
  until messages.valid_nbr_from_board?(p_1_choice.to_i, 1, 9, table)[0] &&
        messages.valid_nbr_from_board?(p_1_choice.to_i, 1, 9, table)[1]

    if messages.valid_nbr_from_board?(p_1_choice.to_i, 1, 9, table)[0] &&
       !messages.valid_nbr_from_board?(p_1_choice.to_i, 1, 9, table)[1]
      p_1_choice = game.u_entry("\n#{game.p_1} Number already taken, retry")
    else
      p_1_choice = game.u_entry("#{game.p_1} please select v a number from 1-9")
    end
  end

  table = game.move(table, p_1_choice.to_i, game.p_1_symb.to_s)

  game.board(table)
  i = 0
  while i < table.size
    if (game.p_1_symb == table[i]) &&
       (table[i] == table[i + 1] && table[i] == table[i + 2]) ||
       i.zero? && table[i] == table[i + 4] && table[i] == table[i + 8]
      puts "Congratulations #{game.p_1}, you win the game!"
      return !game.won
    end
    i += 3
  end

  (0..2).each do |nbr|
    if game.p_1_symb == table[nbr] &&
       (table[nbr] == table[nbr + 3] &&
       table[nbr] == table[nbr + 6]) ||
       nbr == 2 && table[nbr] == table[nbr + 2] && table[nbr] == table[nbr + 4]
      puts "Congratulations #{game.p_1}, you win the game!"
      return !game.won
    end
    next
  end

  break if game.won || game.draw(table)

  p_2_choice = game.u_entry("#{game.p_2} please select a number from 1-9")
  until messages.valid_nbr_from_board?(p_2_choice.to_i, 1, 9, table)[0] &&
        messages.valid_nbr_from_board?(p_2_choice.to_i, 1, 9, table)[1]

    if messages.valid_nbr_from_board?(p_2_choice.to_i, 1, 9, table)[0] &&
       !messages.valid_nbr_from_board?(p_2_choice.to_i, 1, 9, table)[1]
      p_2_choice = game.u_entry("\n#{game.p_2} Number already taken, retry")
    else
      p_2_choice = game.u_entry("#{game.p_2} please select v a number from 1-9")
    end
  end

  table = game.move(table, p_2_choice.to_i, game.p_2_symb.to_s)

  game.board(table)
  # won : win or draw, break the loop
  i = 0
  while i < table.size
    if (game.p_2_symb == table[i]) &&
       (table[i] == table[i + 1] && table[i] == table[i + 2]) ||
       i.zero? && table[i] == table[i + 4] && table[i] == table[i + 8]
      puts "Congratulations #{game.p_2}, you win the game!"
      return !game.won
    end
    i += 3
  end

  (0..2).each do |nbr|
    if game.p_2_symb == table[nbr] &&
       (table[nbr] == table[nbr + 3] &&
       table[nbr] == table[nbr + 6]) ||
       nbr == 2 && table[nbr] == table[nbr + 2] && table[nbr] == table[nbr + 4]
      puts "Congratulations #{game.p_2}, you win the game!"
      return !game.won
    end
    next
  end

  break if game.won || game.draw(table)
end

# rubocop:enable Style/ConditionalAssignment, Style/BlockLength
